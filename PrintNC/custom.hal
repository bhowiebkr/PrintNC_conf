# initialize the estop array with 4 instances
loadrt estop_latch count=6
#loadrt near


# add them both to the servo thread so they do stuff. If you don't add them, linuxcnc still works but the 
# latch doesn't and you are wasting hours wondering why.addf estop-latch.0 servo-thread
addf estop-latch.0 servo-thread
addf estop-latch.1 servo-thread
addf estop-latch.2 servo-thread
addf estop-latch.3 servo-thread
addf estop-latch.4 servo-thread
addf estop-latch.5 servo-thread
#addf near.0 servo-thread

# Get the software estop and connect it to the first latch in the array
unlinkp iocontrol.0.user-enable-out # because pncconf
net latch-ok-in iocontrol.0.user-enable-out => estop-latch.0.ok-in

# connect each one in a chain to trigger the next. for a down chain to work, the up chain has have an "ok-out" signal
net estop-latch0-out estop-latch.0.ok-out => estop-latch.1.ok-in
net estop-latch1-out estop-latch.1.ok-out => estop-latch.2.ok-in
net estop-latch2-out estop-latch.2.ok-out => estop-latch.3.ok-in
net estop-latch3-out estop-latch.3.ok-out => estop-latch.4.ok-in
net estop-latch4-out estop-latch.4.ok-out => estop-latch.5.ok-in

# reset the array from the UI from above
net latch-reset <= iocontrol.0.user-request-enable
net latch-reset => estop-latch.0.reset
net latch-reset => estop-latch.1.reset
net latch-reset => estop-latch.2.reset
net latch-reset => estop-latch.3.reset
net latch-reset => estop-latch.4.reset
net latch-reset => estop-latch.5.reset

# The last fault out in the estop-latch array goes to the estop-out signal
unlinkp iocontrol.0.emc-enable-in # because pncconf
net latch-out iocontrol.0.emc-enable-in <= estop-latch.5.ok-out # this enables the UI to work if the last latch is "ok-out"
net estop-out <= estop-latch.5.fault-out

# connect the external alarms and estops to the estop latch
net external-estop hm2_7i76e.0.7i76.0.0.input-08 => estop-latch.0.fault-in # external estop
net servo-x-estop  hm2_7i76e.0.7i76.0.0.input-16 => estop-latch.1.fault-in
net servo-yl-estop hm2_7i76e.0.7i76.0.0.input-18 => estop-latch.2.fault-in
net servo-yr-estop hm2_7i76e.0.7i76.0.0.input-19 => estop-latch.3.fault-in
net servo-z-estop  hm2_7i76e.0.7i76.0.0.input-17 => estop-latch.4.fault-in
net probe-estop  hm2_7i76e.0.7i76.0.0.input-10-not  => estop-latch.5.fault-in

#Spindle
loadusr -Wn vfd hy_vfd -n vfd -d /dev/rs485_dongle -p none -r 9600
setp vfd.enable 1 # This enables the VFD in the driver

# Connect Speed
net spindle-vel-cmd-rpm => vfd.speed-command
unlinkp spindle.0.speed-in # because pncconf
net spindle-speed vfd.spindle-speed-fb => spindle.0.speed-in
#net spindle-at-speed vfd.spindle-at-speed => spindle.0.at-speed

# Connect forward and reverse
net spindle-cw spindle.0.forward => vfd.spindle-forward
net spindle-ccw spindle.0.reverse => vfd.spindle-reverse

# Connect Spindle On
net spindle-enable => vfd.spindle-on

# Current Amps
net spindle-current <= vfd.OutA
net spindle-voltage <= vfd.rated-motor-voltage

# the probe and the probe estop
# see: https://linuxcnc.org/docs/html/gcode/g-code.html#gcode:g38
net probe-in motion.probe-input <= hm2_7i76e.0.7i76.0.0.input-09-not 

#net motion.probe-input <= probe-in

# connect one input to the commanded spindle speed
#net spindle-cmd => near.0.in1

# connect one input to the encoder-measured spindle speed
#net spindle-speed => near.0.in2

# connect the vfd spindle at speed to simple 0 at speed (at speed is true when the spindle has rampped up to the correct speed)
net spindle-at-speed spindle.0.at-speed <= vfd.spindle-at-speed